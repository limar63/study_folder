#lang racket
(require 2htdp/image)
(require racket/trace)
(define main-list '((0 0) (0 0 1 2 3 5 5 6) 10 (1 0)))


(place-image (square 10 "solid" "green") 15 15 (place-image (square 10 "solid" "green") 35 35 (empty-scene 100 100)))


(define-struct snake (apple-list body-list scene-size change-list tick-count))



;x and y reversed (x is right and y is left element)
(define (apple-list given-list) (car given-list))
(define (snake-list given-list) (cadr given-list))
(define (list-past-snake given-list) (cddr given-list))
(define (scene-value given-list) (caddr given-list))
(define (change-list given-list) (cadddr given-list))
(define (apple-x given-list) (cadr (apple-list given-list)))
(define (apple-y given-list) (car (apple-list given-list)))
(define (snake-x given-list) (cadr (snake-list given-list)))
(define (snake-y given-list) (car (snake-list given-list)))
(define (snake-second-x given-list) (cadddr (snake-list given-list)))
(define (snake-second-y given-list) (caddr (snake-list given-list)))
(define (scene-size given-list) (caddr given-list))
(define (change-x given-list) (cadr (scene-value given-list)))
(define (change given-list) (car (scene-value given-list)))
(define (new-head-x given-list) (+ (snake-x given-list)(scene-value given-list)))
(define (new-head-y given-list) (+ (snake-y given-list)(scene-value given-list)))
(define (rand-apple given-list) (random 0 (scene-size given-list)))

(define (cut-the-tail list)
  (if (null? (cdr list))
      '()
      (cons
       (car list)
       (cut-the-tail
        (cdr list)))))

(snake-x main-list)
(snake-y main-list)

(new-head-y main-list)
(new-head-x main-list)



(cons (apple-list main-list) (cons (cddadr main-list) (cddr main-list)))

(place-image
 (square (scene-size main-list) "solid" "green")
 (+ (* (apple-x main-list) (scene-size main-list)) (/ (scene-size main-list) 2))
 (+ (* (apple-y main-list) (scene-size main-list)) (/ (scene-size main-list) 2))
 (empty-scene
  (sqr (scene-size main-list))
  (sqr (scene-size main-list))))


(cut-the-tail '(0 1 2 3))

(rand-apple main-list)
(rand-apple main-list)

(equal? '(0 1) '(1 1))

(define (apple-check main-list)
  (if
   (null? (snake-list main-list))
   #t
   (if
    (equal?
     (cons
      (apple-y main-list)
      (list (apple-x main-list)))
     (cons
      (snake-y main-list)
      (list (snake-x main-list))))
    #f
    (apple-check
     (cons
      (apple-list main-list)
      (cons
       (cdr (cdr (snake-list main-list)))
       (list-past-snake main-list)))))))

(define (body-check main-list)
  (if
   (null?
    (cddr (snake-list main-list)))
   #t
   (if
    (equal?
     (cons
      (snake-y main-list)
      (list (snake-x main-list)))
     (cons
      (snake-second-y main-list)
      (list (snake-second-x main-list))))
    #f
    (body-check
     (cons
      (apple-list main-list)
      (cons
       (cons
        (snake-y main-list)
        (cons
         (snake-x main-list)
         (cddddr (snake-list main-list))))
       (list-past-snake main-list)))))))

(body-check main-list)



(define (new-apple main-list)
  (if
   (apple-check main-list)
   main-list
   (new-apple
    (cons
     (cons
      (rand-apple main-list)
      (cons
       (rand-apple main-list)
       '()))
     (cdr main-list)))))

(new-apple
       (cons
        (cons
         (rand-apple main-list)
         (cons
          (rand-apple main-list)
          '()))
        (cdr main-list)))


(define (add-second-double-tail given-list)
  (if (null?(cdr (cdr given-list)))
      (cons (car given-list)
            (cons
             (car (cdr given-list))
             given-list))
      (cons (car given-list) (add-second-double-tail (cdr given-list)))))

(add-second-double-tail (list 1 2 3 4 5))

(snake-apple-list (make-snake (list 0 1) (list 0 0 1 2 3 5 5 6) (list 0 1) 10 20))