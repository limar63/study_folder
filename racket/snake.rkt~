#lang racket
(require 2htdp/image)
(require 2htdp/universe)
(require racket/trace)

;x and y reversed (x is right and y is left element)
(define (apple-list given-list) (car given-list))
(define (snake-list given-list) (cadr given-list))
(define (scene-size given-list) (caddr given-list))
(define (list-past-snake given-list) (cddr given-list))
(define (change-list given-list) (cadddr given-list))
(define (apple-x given-list) (cadr (apple-list given-list)))
(define (apple-y given-list) (car (apple-list given-list)))
(define (snake-x given-list) (cadr (snake-list given-list)))
(define (snake-y given-list) (car (snake-list given-list)))
(define (change-x given-list) (cadr (change-list given-list)))
(define (change-y given-list) (car (change-list given-list)))
(define (new-head-x given-list) (+ (snake-x given-list)(change-x given-list)))
(define (new-head-y given-list) (+ (snake-y given-list)(change-y given-list)))


(define (cut-the-tail list)
  (if (null? (cdr list))
      '()
      (cons
       (car list)
       (cut-the-tail
        (cdr list)))))

(define (drawing-game main-list)
  (if (null? (snake-list main-list))
      (place-image
       (square (scene-size main-list) "solid" "green")
       (+
        (* (apple-x main-list) (scene-size main-list))
        (/ (scene-size main-list) 2))
       (+
        (* (apple-y main-list) (scene-size main-list))
        (/ (scene-size main-list) 2))
       (empty-scene
        (sqr (scene-size main-list))
        (sqr (scene-size main-list))))
      (place-image
       (square (scene-size main-list) "solid" "grey")
       (+
        (* (snake-x main-list) (scene-size main-list))
        (/ (scene-size main-list) 2))
       (+
        (* (snake-y main-list) (scene-size main-list))
        (/ (scene-size main-list) 2))
       (drawing-game
        (cons
         (apple-list main-list)
         (cons
          (cddadr main-list)
          (list-past-snake main-list)))))))

(define (moving-snake main-list)
  (if (and
       (= (snake-x main-list) (apple-x main-list))
       (= (snake-y main-list) (apple-y main-list)))
      (cons
         (new-apple main-list)
         (cons
          (cons apple-y
                (cons apple-x
                      (snake-list main-list)))
          (list-past-snake main-list)))
      (cons
       (apple-list main-list)
       (cons
        (cons
         (if (=
              (new-head-y main-list)
              (scene-size main-list))
             0
             (if (<
                  (new-head-y main-list)
                  0)
                 (-
                  (scene-size main-list)
                  1)
                 (new-head-y main-list)))
         (cons
          (if (=
              (new-head-x main-list)
              (scene-size main-list))
             0
             (if (<
                  (new-head-x main-list)
                  0)
                 (-
                  (scene-size main-list)
                  1)
                 (new-head-x main-list)))
          (cut-the-tail
           (cut-the-tail
            (snake-list main-list)))))
        (list-past-snake main-list)))))

(define (new-apple main-list) (5))

(trace moving-snake)
(big-bang '((1 1) (0 2 0 1 0 0) 25 (0 -1))
  [to-draw drawing-game]
  [on-tick moving-snake])