function reduce(seq, fun, base)                                                                                --function which applies a function to a sequence to get a single element result
    if base ~= nil then
        table.insert(seq, 1, base)
    end
    local result = fun(seq[1], seq[2])
    print('first red', result)
    print('seq range is', #seq)
    for i = 3, #seq do
        
        result = fun(result, seq[i])
        print('going red', result)
    end
    print('end result is', result)
    return result
end

function compare(f, cont, errcont)                                                                     --abstract function, which allows to compare elements by 6 different comparison functions
    return function(x, cont, errcont)                                                                  --returning lambda which will do all the work and require arguments to be added
        if #x == nil then                                                                              --x is the list of arguments we need to compare. if no arguments given we return false
            return errcont('Exception: can\'t compare 0 arguments')
        elseif not all(map(x, function(y) return type(y) == 'number' end)) then
            return errcont('Exception: you can only compare numbers')
        elseif #x == 1 then
            return cont('#t')
        else
            cont(takeBool(reduce(x, f)))
        end
    end
end

more_than = compare(function(x, y) return x > y end)

less_than = compare(function(x, y) return x < y end)

equal_or_less_than = compare(function(x, y) return x <= y end)

equal_or_more_than = compare(function(x, y) return x >= y end)

equal = compare(function(x, y) return x == y end)

nonequal = compare(function(x, y) return x ~= y end)
